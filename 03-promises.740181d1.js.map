{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEcC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA2BtC,SAASC,EAAcC,EAAUC,GAY/B,OAXgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IApCMJ,SAASC,cAAc,SAC/BY,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBASN,IARA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALJ,MAAOQ,EAAIJ,EAAJK,KAAMC,EAAMN,EAANO,OAGvBC,EAAWC,OAAON,EAAMO,OACxBC,EAAUF,OAAOL,EAAKM,OACtBE,EAAYH,OAAOH,EAAOI,OAErBG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EACnC3B,EAAc2B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAU6B,EAAKD,EAALnB,M,OACjBd,EAAAmC,OAAOC,QAAQ,yBAA0CC,OAAfhC,EAAS,QAAYgC,OAANH,EAAM,M,IAEhEI,OAAM,SAAAL,G,IAAG5B,EAAQ4B,EAAR5B,SAAUkC,EAAKN,EAALnB,M,OAClBd,EAAAmC,OAAOK,QAAQ,wBAAuCH,OAAfhC,EAAS,QAAYgC,OAANE,EAAM,M,IAEhEb,GAAYG,EAEdb,EAAMG,cAAcsB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delay = document.querySelector('input[name = delay]');\nconst step = document.querySelector('input[name = step]');\nconst amount = document.querySelector('input[name = amount]');\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let delayNum = Number(delay.value);\n  let stepNum = Number(step.value);\n  let amountNum = Number(amount.value);\n\n  for (let i = 1; i <= amountNum; i += 1) {\n    createPromise(i, delayNum)\n      .then(({ position, delay }) =>\n        Notify.success(`✅ Fulfilled a promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected a promise ${position} in ${delay}ms`)\n      );\n    delayNum += stepNum;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay4","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step1","step","amount1","amount","delayNum","Number","value","stepNum","amountNum","i","then","param","delay2","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.740181d1.js.map"}